import org.spongepowered.gradle.plugin.config.PluginLoaders
import org.spongepowered.plugin.metadata.PluginDependency

plugins {
    `java-library`
    id("com.github.johnrengelman.shadow")
    id("org.spongepowered.gradle.plugin") version "1.1.1"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":${COMMON_PROJECT_NAME}"))
}

sponge {
    apiVersion("${SPONGEAPI_VERSION}")
    plugin("${PLUGIN_ID}") {
        loader(PluginLoaders.JAVA_PLAIN)
        displayName("${PLUGIN_NAME}")
        mainClass("${MAIN_CLASS}")
        #if (${DESCRIPTION})
        description("${DESCRIPTION}")
        #else
        description("My plugin description")
        #end
        links {
            #if (${WEBSITE})
            homepage("${WEBSITE}")
            #else
            // homepage("https://spongepowered.org")
            #end
            // source("https://spongepowered.org/source")
            // issues("https://spongepowered.org/issues")
        }
        #foreach (${AUTHOR} in ${AUTHORS})
        contributor("${AUTHOR}") {
            description("Author")
        }
        #end
        dependency("spongeapi") {
            loadOrder(PluginDependency.LoadOrder.AFTER)
            optional(false)
        }
        #foreach (${DEPENDENCY} in ${DEPENDENCIES})
        dependency("${DEPEDENCY}") {
            loadOrder(PluginDependency.LoadOrder.AFTER)
            optional(false)
        }
        #end
    }
}

val javaTarget = 8 // Sponge targets a minimum of Java 8
java {
    sourceCompatibility = JavaVersion.toVersion(javaTarget)
    targetCompatibility = JavaVersion.toVersion(javaTarget)
    if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
        toolchain.languageVersion.set(JavaLanguageVersion.of(javaTarget))
    }
}

tasks.withType(JavaCompile::class).configureEach {
    options.apply {
        encoding = "utf-8" // Consistent source file encoding
        release.set(javaTarget)
    }
}

// Make sure all tasks which produce archives (jar, sources jar, javadoc jar, etc) produce more consistent output
tasks.withType(AbstractArchiveTask::class).configureEach {
    isReproducibleFileOrder = true
    isPreserveFileTimestamps = false
}

tasks {
    shadowJar {
        dependencies {
            include(dependency(":${COMMON_PROJECT_NAME}"))
        }
    }

    build {
        dependsOn(shadowJar)
    }
}
